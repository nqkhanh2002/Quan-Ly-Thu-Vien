/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BorrowAndReturnManager.BorrowManager.View;

import BorrowAndReturnManager.BorrowManager.Model.mdl_thedocgia;
import BorrowAndReturnManager.BorrowManager.Model.mdl_thongtinsach;
import LoginAndRegister.MyConnection;
import java.awt.Color;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Admin
 */
public class jf_add extends javax.swing.JFrame {

    int MASACH_selected = 0;
    
    public jf_add() {
        initComponents();
        jdcNgayMuon.getJCalendar().setMaxSelectableDate(new Date());
        getListTHEDOCGIA();
        getListTHONGTINSACH();
        setCurrentDate();
        this.setLocationRelativeTo(null);
        this.setTitle("Borrow Manager - Add");
        setDefaultCloseOperation(this.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jtfMaPhieuMuonSach = new javax.swing.JTextField();
        jtfMaDocGia = new javax.swing.JTextField();
        jdcNgayMuon = new com.toedter.calendar.JDateChooser();
        btnExit = new javax.swing.JButton();
        jpnView1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        classTableModel1 = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        jpnView2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        classTableModel2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtfSearchTenSach = new javax.swing.JTextField();
        jpnView3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        classTableModel3 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jtfSearchDocGia = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(251, 224, 196));
        jPanel1.setPreferredSize(new java.awt.Dimension(600, 600));

        btnAdd.setBackground(new java.awt.Color(114, 158, 190));
        btnAdd.setFont(new java.awt.Font("SF Pro Display", 1, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAddMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddMouseExited(evt);
            }
        });
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(114, 158, 190));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Borrow Manager", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SF Pro Display", 1, 24), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("SF Pro Display", 1, 18)); // NOI18N
        jLabel1.setText("Mã phiếu mượn sách:");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, -1));

        jLabel3.setFont(new java.awt.Font("SF Pro Display", 1, 18)); // NOI18N
        jLabel3.setText("Mã độc giả:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 50, -1, -1));

        jLabel7.setFont(new java.awt.Font("SF Pro Display", 1, 18)); // NOI18N
        jLabel7.setText("Ngày mượn:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, -1, -1));

        jtfMaPhieuMuonSach.setEditable(false);
        jtfMaPhieuMuonSach.setBackground(new java.awt.Color(204, 204, 204));
        jtfMaPhieuMuonSach.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel2.add(jtfMaPhieuMuonSach, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 50, 120, 30));

        jtfMaDocGia.setEditable(false);
        jtfMaDocGia.setBackground(new java.awt.Color(204, 204, 204));
        jtfMaDocGia.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel2.add(jtfMaDocGia, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 50, 150, 30));

        jdcNgayMuon.setDateFormatString("dd/MM/yyyy");
        jdcNgayMuon.setFont(new java.awt.Font("SF Pro Display", 0, 14)); // NOI18N
        jPanel2.add(jdcNgayMuon, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 100, 160, 30));

        btnExit.setBackground(new java.awt.Color(114, 158, 190));
        btnExit.setFont(new java.awt.Font("SF Pro Display", 1, 14)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnExitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnExitMouseExited(evt);
            }
        });
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        classTableModel1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "              Mã sách", "                       Tên sách"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        classTableModel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                classTableModel1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(classTableModel1);

        javax.swing.GroupLayout jpnView1Layout = new javax.swing.GroupLayout(jpnView1);
        jpnView1.setLayout(jpnView1Layout);
        jpnView1Layout.setHorizontalGroup(
            jpnView1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
        );
        jpnView1Layout.setVerticalGroup(
            jpnView1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnView1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnSave.setBackground(new java.awt.Color(114, 158, 190));
        btnSave.setFont(new java.awt.Font("SF Pro Display", 1, 14)); // NOI18N
        btnSave.setText("Save");
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSaveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSaveMouseExited(evt);
            }
        });
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        classTableModel2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "                  Mã sách"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(classTableModel2);

        javax.swing.GroupLayout jpnView2Layout = new javax.swing.GroupLayout(jpnView2);
        jpnView2.setLayout(jpnView2Layout);
        jpnView2Layout.setHorizontalGroup(
            jpnView2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 164, Short.MAX_VALUE)
            .addGroup(jpnView2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
        );
        jpnView2Layout.setVerticalGroup(
            jpnView2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 95, Short.MAX_VALUE)
            .addGroup(jpnView2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnView2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Mã sách đã chọn");

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jLabel5.setText("Tìm kiếm tên sách:");

        jtfSearchTenSach.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfSearchTenSachKeyReleased(evt);
            }
        });

        classTableModel3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "             Mã độc giả", "                     Họ tên"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        classTableModel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                classTableModel3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(classTableModel3);

        javax.swing.GroupLayout jpnView3Layout = new javax.swing.GroupLayout(jpnView3);
        jpnView3.setLayout(jpnView3Layout);
        jpnView3Layout.setHorizontalGroup(
            jpnView3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
        );
        jpnView3Layout.setVerticalGroup(
            jpnView3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnView3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel8.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jLabel8.setText("Tìm kiếm tên độc giả:");

        jtfSearchDocGia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfSearchDocGiaKeyReleased(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(114, 158, 190));
        btnDelete.setFont(new java.awt.Font("SF Pro Display", 1, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDeleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDeleteMouseExited(evt);
            }
        });
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jpnView3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpnView1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jpnView2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(42, 42, 42))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jtfSearchTenSach, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(50, 50, 50))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfSearchDocGia, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4))
                            .addComponent(jtfSearchDocGia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jpnView3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(66, 66, 66))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfSearchTenSach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jpnView1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpnView2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseEntered
        btnAdd.setBackground(new Color(79,110,133));
    }//GEN-LAST:event_btnAddMouseEntered

    private void btnAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseExited
        btnAdd.setBackground(new Color(114,158,190));
    }//GEN-LAST:event_btnAddMouseExited

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if(MASACH_selected > 0) {
            int num_rows = classTableModel2.getRowCount();
            if(num_rows < 5) {
                boolean MASACH_isExist = false;
                for (int i = 0; i < num_rows; i++) {
                    TableModel model = classTableModel2.getModel();
                    int MASACH_exist = Integer.parseInt(model.getValueAt(i, 0).toString());
                    if(MASACH_selected == MASACH_exist) MASACH_isExist = true;
                }
                if(MASACH_isExist == true) JOptionPane.showMessageDialog(null, "Sách này đã được thêm vào trước đó!!!");
                else {
                    DefaultTableModel defaultTable = (DefaultTableModel) classTableModel2.getModel();
                    Object[] row = new Object[1];
                    row[0] = MASACH_selected;
                    defaultTable.addRow(row);
                    MASACH_selected = 0;
                }

            } else JOptionPane.showMessageDialog(null, "Một lần mượn chỉ tối đa 5 quyển sách!!!");
        }
        else JOptionPane.showMessageDialog(null, "Vui lòng chọn sách muốn mượn!!!");
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnExitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseEntered
        btnExit.setBackground(new Color(79,110,133));
    }//GEN-LAST:event_btnExitMouseEntered

    private void btnExitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseExited
        btnExit.setBackground(new Color(114,158,190));
    }//GEN-LAST:event_btnExitMouseExited

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        int confirmed = JOptionPane.showConfirmDialog(null, 
            "Do you want to exit Add?", "Exit Add",
        JOptionPane.YES_NO_OPTION);

        if (confirmed == JOptionPane.YES_OPTION) {
            this.dispose();
        }
        else { setDefaultCloseOperation(this.DO_NOTHING_ON_CLOSE); }
    }//GEN-LAST:event_btnExitActionPerformed

    private void classTableModel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classTableModel1MouseClicked
        int i = classTableModel1.getSelectedRow();
        TableModel model = classTableModel1.getModel();
        MASACH_selected = Integer.parseInt(model.getValueAt(i, 0).toString());
    }//GEN-LAST:event_classTableModel1MouseClicked

    private void btnSaveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseEntered
        btnSave.setBackground(new Color(79,110,133));
    }//GEN-LAST:event_btnSaveMouseEntered

    private void btnSaveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseExited
        btnSave.setBackground(new Color(114,158,190));
    }//GEN-LAST:event_btnSaveMouseExited

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        int num_rows = classTableModel2.getRowCount();
        String sMadocgia = jtfMaDocGia.getText().toString();
        Date date = jdcNgayMuon.getDate();
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");  
        String sDate = dateFormat.format(date);
        if(num_rows > 0 && !sMadocgia.trim().equals("") && !sDate.trim().equals("")) {
            int madocgia = Integer.parseInt(sMadocgia);
            
            
            PreparedStatement ps1;
            int rs1;
            String query1 = "INSERT INTO phieumuonsach(NGAYMUON,MADOCGIA) values(?,?);;";
            
            PreparedStatement ps2;
            int rs2;
            String query2 = "INSERT INTO ctphieumuonsach(MAPHIEUMUONSACH,MASACH) values(?,?);;";
            PreparedStatement ps3;
            ResultSet rs3;
            String query3 = "Select MAPHIEUMUONSACH from phieumuonsach order by MAPHIEUMUONSACH desc limit 1;";
            try {
                ps1 = MyConnection.getConnection().prepareStatement(query1);
                ps1.setString(1, sDate);
                ps1.setInt(2, madocgia);
                rs1 = ps1.executeUpdate();
                if(rs1 > 0) {
                    ps3 = MyConnection.getConnection().prepareStatement(query3);
                    rs3 = ps3.executeQuery();
                    int maphieumuonsach = 0;
                    while (rs3.next()) {
                        maphieumuonsach = rs3.getInt("MAPHIEUMUONSACH");
                    }	
                    if(maphieumuonsach > 0) {
                        int count = 0;
                        for(int i = 0; i < num_rows; i++){
                            TableModel model = classTableModel2.getModel();
                            int masach = Integer.parseInt(model.getValueAt(i, 0).toString());  
                            ps2 = MyConnection.getConnection().prepareStatement(query2);
                            ps2.setInt(1, maphieumuonsach);
                            ps2.setInt(2, masach);
                            rs2 = ps2.executeUpdate();
                            if(rs2 > 0){ 
                                count++;
                                PreparedStatement ps4;
                                int rs4;
                                String query4 = "UPDATE thongtinsach SET TRANGTHAI=? WHERE MASACH='" + masach + "';";
                                ps4 = MyConnection.getConnection().prepareStatement(query4);
                                ps4.setInt(1, 1);
                                rs4 = ps4.executeUpdate();
                                ps4.close();
                            }
                            ps2.close();
                        }
                        if(count == num_rows) {
                            DefaultTableModel model1 = (DefaultTableModel) classTableModel3.getModel();
                            model1.setRowCount(0);
                            getListTHEDOCGIA();
                            DefaultTableModel model2 = (DefaultTableModel) classTableModel1.getModel();
                            model2.setRowCount(0);
                            getListTHONGTINSACH();
                            jtfMaDocGia.setText("");
                            Date today = Calendar.getInstance().getTime();
                            String temp =  dateFormat.format(today.getTime());
                            Date date1 = null;
                            try {
                                date1 = new SimpleDateFormat("dd/MM/yyyy").parse(temp);
                            } catch (Exception e) {
                            }
                            jdcNgayMuon.setDate(date1);
                            DefaultTableModel model = (DefaultTableModel) classTableModel2.getModel();
                            model.setRowCount(0);
                            JOptionPane.showMessageDialog(null, "Đã tạo phiếu mượn sách thành công!!!");
                        }
                        else JOptionPane.showMessageDialog(null, "Xảy ra lỗi khi thêm chi tiết phiếu mượn sách!!!");
                        
                    }
                    else JOptionPane.showMessageDialog(null, "Lỗi mạng không tìm được mã phiếu mượn sách vừa thêm!!!");
                    ps3.close();
                    rs3.close();
                    
                }
                else JOptionPane.showMessageDialog(null, "Tạo phiếu mượn sách thất bại!!!");
                ps1.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        else if(num_rows == 0) JOptionPane.showMessageDialog(null, "Chưa thêm sách! Vui lòng thêm sách muốn mượn!!!");
        else if(sMadocgia.trim().equals("")) JOptionPane.showMessageDialog(null, "Chưa chọn độc giả! Vui lòng chọn!!!");
        else if(sDate.trim().equals("")) JOptionPane.showMessageDialog(null, "Chưa chọn ngày! Vui lòng chọn!!!");
    }//GEN-LAST:event_btnSaveActionPerformed

    private void jtfSearchTenSachKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfSearchTenSachKeyReleased
        String key_tensach = jtfSearchTenSach.getText().trim();
        DefaultTableModel model = (DefaultTableModel) classTableModel1.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        classTableModel1.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(key_tensach, 1));
    }//GEN-LAST:event_jtfSearchTenSachKeyReleased

    private void classTableModel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classTableModel3MouseClicked
        int i = classTableModel3.getSelectedRow();
        TableModel model = classTableModel3.getModel();
        jtfMaDocGia.setText(model.getValueAt(i, 0).toString());
    }//GEN-LAST:event_classTableModel3MouseClicked

    private void jtfSearchDocGiaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfSearchDocGiaKeyReleased
        String key_hoten = jtfSearchDocGia.getText().trim();
        DefaultTableModel model = (DefaultTableModel) classTableModel3.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        classTableModel3.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(key_hoten, 1));
    }//GEN-LAST:event_jtfSearchDocGiaKeyReleased

    private void btnDeleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseEntered
        btnDelete.setBackground(new Color(79,110,133));
    }//GEN-LAST:event_btnDeleteMouseEntered

    private void btnDeleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseExited
        btnDelete.setBackground(new Color(114,158,190));
    }//GEN-LAST:event_btnDeleteMouseExited

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        DefaultTableModel defaultTable = (DefaultTableModel) classTableModel2.getModel();
        if(classTableModel2.getSelectedRowCount() == 1) {
            int confirmed = JOptionPane.showConfirmDialog(null, 
                "Are you sure you want to delete it?", "Delete Message Box",
                JOptionPane.YES_NO_OPTION);

            if (confirmed == JOptionPane.YES_OPTION) {
                defaultTable.removeRow(classTableModel2.getSelectedRow());
            }
            else { setDefaultCloseOperation(this.DO_NOTHING_ON_CLOSE); }
        }
        else {
            if(classTableModel2.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "Không còn hàng nào để xóa!!!");
            }
            else JOptionPane.showMessageDialog(null, "Vui lòng chọn một hàng để xóa!!!");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        ImageIcon icon = new ImageIcon(this.getClass().getClassLoader().getResource("assets/borrow_and_return.png"));
        setIconImage(icon.getImage());
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int confirmed = JOptionPane.showConfirmDialog(null, 
            "Do you want to exit Add?", "Exit Add",
        JOptionPane.YES_NO_OPTION);

        if (confirmed == JOptionPane.YES_OPTION) {
            this.dispose();
        }
        else { setDefaultCloseOperation(this.DO_NOTHING_ON_CLOSE); }
    }//GEN-LAST:event_formWindowClosing

    
    public void getListTHEDOCGIA(){
	DefaultTableModel defaultTable = (DefaultTableModel) classTableModel3.getModel();
        TableColumn col0 = classTableModel3.getColumnModel().getColumn(0);
        col0.setPreferredWidth(0);
	List<mdl_thedocgia> thedocgiaList = new ArrayList<>();
        PreparedStatement ps;
        ResultSet rs;
        String query = "Select MADOCGIA, HOTEN, NGAYHETHAN from thedocgia where MADOCGIA not in (Select MADOCGIA from phieumuonsach where MAPHIEUMUONSACH not in (Select MAPHIEUMUONSACH from phieutrasach));";
	try {
            ps = MyConnection.getConnection().prepareStatement(query);
            rs = ps.executeQuery();
            while (rs.next()) {
		int MADOCGIA = rs.getInt("MADOCGIA");
		String HOTEN = rs.getString("HOTEN");
                
                String NGAYHETHAN = rs.getString("NGAYHETHAN");
                Date date_ngayhethan = null;
                try {
                    date_ngayhethan = new SimpleDateFormat("dd/MM/yyyy").parse(NGAYHETHAN);
                } catch (ParseException ex) {
                    Logger.getLogger(jf_add.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                Date today = Calendar.getInstance().getTime();
                DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                String temp =  dateFormat.format(today.getTime());
                Date date_now = null;
                try {
                    date_now = new SimpleDateFormat("dd/MM/yyyy").parse(temp);
                } catch (ParseException ex) {
                    Logger.getLogger(jf_add.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if(date_ngayhethan.compareTo(date_now) > 0) {
                    mdl_thedocgia thedocgia = new mdl_thedocgia(MADOCGIA, HOTEN);
                    thedocgiaList.add(thedocgia);
                }
            }	
            Object[] row = new Object[2];
            for(int i = 0; i <thedocgiaList.size(); i++) {
		row[0] = thedocgiaList.get(i).getMADOCGIA();
		row[1] = thedocgiaList.get(i).getHOTEN();
		defaultTable.addRow(row);
            }
            ps.close();
            rs.close();
	} catch (SQLException e) {
	}
    }
    
    public void getListTHONGTINSACH() {
	DefaultTableModel defaultTable = (DefaultTableModel) classTableModel1.getModel();
        TableColumn col0 = classTableModel1.getColumnModel().getColumn(0);
        col0.setPreferredWidth(0);
	List<mdl_thongtinsach> thongtinsachList = new ArrayList<>();
        PreparedStatement ps;
        ResultSet rs;
        String query = "Select MASACH, TENSACH from thongtinsach where TRANGTHAI = 0;";
	try {
            ps = MyConnection.getConnection().prepareStatement(query);
            rs = ps.executeQuery();
            while (rs.next()) {
		int MADOCGIA = rs.getInt("MASACH");
		String HOTEN = rs.getString("TENSACH");
		mdl_thongtinsach thongtinsach = new mdl_thongtinsach(MADOCGIA, HOTEN);
		thongtinsachList.add(thongtinsach);
            }	
            Object[] row = new Object[2];
            for(int i = 0; i <thongtinsachList.size(); i++) {
		row[0] = thongtinsachList.get(i).getMASACH();
		row[1] = thongtinsachList.get(i).getTENSACH();
		defaultTable.addRow(row);
            }
            ps.close();
            rs.close();
	} catch (SQLException e) {
	}
    }
    
    public void setCurrentDate() {
        Date today = Calendar.getInstance().getTime();
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String temp =  dateFormat.format(today.getTime());
        Date date = null;
        try {
             date = new SimpleDateFormat("dd/MM/yyyy").parse(temp);
        } catch (ParseException e) {
        }
        jdcNgayMuon.setDate(date);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jf_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jf_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jf_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jf_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jf_add().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSave;
    private javax.swing.JTable classTableModel1;
    private javax.swing.JTable classTableModel2;
    private javax.swing.JTable classTableModel3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    public static com.toedter.calendar.JDateChooser jdcNgayMuon;
    private javax.swing.JPanel jpnView1;
    private javax.swing.JPanel jpnView2;
    private javax.swing.JPanel jpnView3;
    private javax.swing.JTextField jtfMaDocGia;
    private javax.swing.JTextField jtfMaPhieuMuonSach;
    private javax.swing.JTextField jtfSearchDocGia;
    private javax.swing.JTextField jtfSearchTenSach;
    // End of variables declaration//GEN-END:variables
}
